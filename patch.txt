diff --git a/pkg/sdl/sdl.go b/pkg/sdl/sdl.go
index d61cf27..60efece 100644
--- a/pkg/sdl/sdl.go
+++ b/pkg/sdl/sdl.go
@@ -7,6 +7,7 @@ package sdl
 import "C"
 
 import (
+	"fmt"
 	"io"
 	"hyades/event"
 	"image"
@@ -53,7 +54,7 @@ type IntRect interface {
 	Height() int
 }
 
-func Rect(x, y int16, width, height uint16) IntRect {
+func Rect(x, y int16, width, height uint16) *C.SDL_Rect {
 	return &C.SDL_Rect{C.Sint16(x), C.Sint16(y), C.Uint16(width), C.Uint16(height)}
 }
 
@@ -65,6 +66,10 @@ func (self *C.SDL_Rect) Width() int { return int(self.w) }
 
 func (self *C.SDL_Rect) Height() int { return int(self.h) }
 
+func (self *C.SDL_Rect) String() string {
+	return fmt.Sprintf("[%d %d - %d %d]", self.x, self.y, self.w, self.h)
+}
+
 func convertRect(rec IntRect) *C.SDL_Rect {
 	return &C.SDL_Rect{C.Sint16(rec.X()), C.Sint16(rec.Y()),
 		C.Uint16(rec.Width()), C.Uint16(rec.Height())}
@@ -170,8 +175,8 @@ func (self *Surface) mapRGBA(c image.Color) uint32 {
 }
 
 func (self *Surface) Blit(target *Surface, x, y int) {
-	rect := C.SDL_Rect{C.Sint16(x), C.Sint16(y), 0, 0}
-	C.SDL_BlitSurface(self.surf, self.blitRect, target.surf, &rect)
+	rect := C.SDL_Rect{C.Sint16(x), C.Sint16(y), 0, 0};
+	C.SDL_BlitSurface(self.surf, nil, target.surf, &rect)
 }
 
 func (self *Surface) BlitRect(target *Surface, area IntRect, x, y int) {
@@ -180,9 +185,19 @@ func (self *Surface) BlitRect(target *Surface, area IntRect, x, y int) {
 	C.SDL_BlitSurface(self.surf, srcRect, target.surf, &rect)
 }
 
-func (self *Surface) Width() int { return int(self.surf.w) }
+func (self *Surface) Width() int {
+	if self.blitRect != nil {
+		return self.blitRect.Width()
+	}
+	return int(self.surf.w)
+}
 
-func (self *Surface) Height() int { return int(self.surf.h) }
+func (self *Surface) Height() int {
+	if self.blitRect != nil {
+		return self.blitRect.Height()
+	}
+	return int(self.surf.h)
+}
 
 func (self *Surface) At(x, y int) image.Color {
 	bitMask := uint32(0xffffffff) >> (32 - self.surf.format.BitsPerPixel)
@@ -222,15 +237,13 @@ func (self *Surface) MakeTiles(width, height int,
 	result = make([]*Surface, numX * numY)
 	i := 0
 
+	fmt.Println("MakeTiles")
 	for y := 0; y < numY; y++ {
 		for x := 0; x < numX; x++ {
-			tile := Make32BitSurface(int(self.surf.flags)|SRCALPHA, width, height)
 			rect := Rect(int16(offsetX + x * (width + gapX)),
 				int16(offsetY + y * (height + gapY)),
 				uint16(width), uint16(height))
-
-			self.Blit(tile, -rect.X(), -rect.Y())
-			tile.Convert(self)
+			tile := &Surface{self.surf, rect}
 
 			result[i] = tile
 			i++
